configurations {
	jaxb
}

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.9'
	}
}

ext.tomcatVersion =       '7.0.42'
ext.postgresqlVersion = '9.4-1206-jdbc42'
ext.hibernateVersion  = '4.1.9.Final'


apply plugin: 'war'
apply plugin: 'tomcat'

task genJaxb {
	ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
	ext.classesDir = "${buildDir}/classes/jaxb"
	ext.schema = "${projectDir}/src/main/resources/schema.xsd"

	inputs.files schema
	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

			xjc(destdir: sourcesDir, schema: schema,
					package: "org.mera.rest.samples.mtom.schema") {
				produces(dir: sourcesDir, includes: "**/*.java")
			}

			javac(destdir: classesDir, source: 1.6, target: 1.6, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}
		}
	}
}


tomcatRun {
	contextPath = 'mtom'
}

dependencies {
    compile("org.springframework.ws:spring-ws-core:$springWsVersion")
    compile("org.springframework:spring-context:$springVersion")	
	compile("org.springframework:spring-tx:$springVersion")	
	compile("org.springframework:spring-web:$springVersion")
	compile("org.springframework:spring-webmvc:$springVersion")
    
    /********** Spring Security *********/
	compile("org.springframework.security:spring-security-web:$springSecurityVersion")
	compile("org.springframework.security:spring-security-config:$springSecurityVersion")
    compileOnly("javax.servlet:javax.servlet-api:3.1.0")

    
	compile("org.springframework:spring-aop:$springVersion")
	
	compile("org.aspectj:aspectjrt:1.8.10")
	compile("org.aspectj:aspectjweaver:1.8.10")
	compile("org.springframework:spring-aspects:$springVersion")
	
	compile("org.postgresql:postgresql:$postgresqlVersion")
	
	compile("org.springframework:spring-jdbc:$springVersion")
	
	compile("ru.yandex.qatools.embed:embedded-services:1.21")
	compile("commons-dbcp:commons-dbcp:1.2.2")

	compile("javax.inject:javax.inject:1")

	compile("org.hibernate:hibernate-validator:5.2.4.Final")
	compile("org.modelmapper:modelmapper:0.7.5")
    compile("org.modelmapper.extensions:modelmapper-spring:0.7.5")
	compile("io.springfox:springfox-swagger2:2.6.1")
	compile("io.springfox:springfox-swagger-ui:2.6.1")

	compile("org.hibernate:hibernate-core:$hibernateVersion")
	
	compile("org.hibernate:hibernate-entitymanager:$hibernateVersion")
	
	compile("org.springframework:spring-orm:$springVersion")
	
    compile("com.fasterxml.jackson.core:jackson-databind:2.7.7")

	/********** Spring Boot *********/
//	compile("org.springframework.boot:spring-boot-starter-web:1.2.3.RELEASE") {
//		exclude module : 'spring-boot-starter-logging'
//	}
	    
    /********** Logging *********/  
	compile("org.slf4j:slf4j-api:1.7.7")
    compile("ch.qos.logback:logback-classic:1.1.2")
       
    compile("com.h2database:h2:1.4.181")

    compile("org.apache.commons:commons-dbcp2:2.1")
    
    compile group: 'commons-pool', name: 'commons-pool', version: '1.6'
    
    // Test Dependencies
    // junit dependency is in main build.gradle
    testCompile("org.springframework:spring-test:$springVersion")

            
	jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"	

	tomcat("org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion",
		   "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion")
	tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion") {
		exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
	}
}
